MENU = {
    '에스프레소': {
        '재료': {
            '물':50,
            '커피': 18,
        },
        '가격': 1.5,
    },
    '라떼': {
        '재료':{
            '물': 200,
            '우유': 150,
            '커피': 24,

        },
        '가격': 2.5,
    },
    '카푸치노': {
        '재료': {
            '물': 250,
            '우유':  10,
            '커피': 24,
        },
        '가격': 3.0,
    },
}

profit = 0
resources = {
    '물': 300,
    '우유': 200,
    '커피': 100
}

# 함수정의 영역
def is_resources_enough(order_ingredient,): # 만약에 특정 함수/메서드 의 결과값이 boolean 이라면 대개 다음 조건문/반복문의 조건식으로 쓰이는 경우가 많습니다. 함수형 프로그래밍 개념을 떠올리시면 됩니다.
    """
    DocString : 함수 / 클래스 / 메서드가 어떤 작동을 하는지 '사람들에게' 설명해주는 기능. 주문 받은 음료를 resources에서 재료 차감을 하고 난 후, 음료 만들기가 가능하면 True 반환, 아니면 False 반환
    : param : order_ingredient
    : return : True / False
    """

    for item in order_ingredient:
        if order_ingredient[item] > resources[item]:
            print(f'죄송합니다{item}이 부족합니다.')
            return False
    return True

def process_coins():
    """동전들을 입력 받아 전체 금액을 반환하는 함수 call3() 유형"""
    # 쿼터, 다임, 니켈, 페니 네종류의 동전
    '''
    쿼터 = 0.25달러     quater
    다임 = 0.1달러      dime
    니켈 = 0.05달러     nickel
    페니 = 0.01달러     penny 
    '''
    sum = 0
    # 이 부분에 로직이 들어가야 할겁니다.

    return sum


change = money_received -drink_cost
 if change > 0:
     # 이러면 음료 제조 과정으로 넘어가야겠네요. 그리고 profit에 추가도 해줘야 하고,
     global profit       # 전역 변수인 profit을 함수 내부에서 사용하기 위한 키워드, 근데 함수 호출을 통한 전역 변수의 값 변화는 권장하지 않습니다.
     profit += drink_cost
     print(f'잔돈 ${change}를 반환해야 합니다.')
     return True         # 그래야 음료 제조 과정의 조건식으로 쓸수 있으니까요
 else:
     print(f'금액이 충분하지 않습니다. ${money_received}를 반환합니다.')
     return False        # 얘는 음료 제조 과정의 조건식으로 쓰이더라도 실행이 안되겠네요.


# todo - 1 : 커피 머신이 반복적으로 돌아가야하는데, off를 입력받으면 종료가 이루어져야 합니다.

# 관련 변수 선언 및 초기화
is_on = True
choice = ''
while is_on:
    # 반복문 내부에서 입력 받아야 하니까 여기다가 선언 및 초기화를 하겠습니다.'
    choice = input('어떤 음료를 드시겠습니까? (에스프레소 / 라떼 / 카푸치노)>>>')
    # todo - 2 : 만약에 choice 변수에 들어간 데이터가 'off'라면 반복문을 종료하도록 나머지 코드를 작성하시오.
    # 만약에 choice 변수에 들어간 데이터가 'off'라면 반복문을 종료하도록 나머지 코드르 작성하시오.
    if choice == 'off':
        is_on = False       # 이번 반복은 전부 실행되고 다음 반복에서 종료
        print('자판기가 종료되었습니다')
        # break         # 바로 종료

# todo -3 : 사용자가 프롬프트에 "report"를 입력하면 현재 자원 값을 보여주는 보고서를 생성합니다.
    elif choice == 'report':
        print(f'물:{resources['물']}ml')
        print(f'물:{resources['우유']}ml')
        print(f'물:{resources['커피']}ml')
        print(f'돈:${profit}ml')

# todo -4: choice == 에스프레소 / 라떼 / 카푸치노 중 하나일떼 작성하는 부분
    elif choice in ('에스프레소', '라떼', '카푸치노'):


    # 자판기에서 choice에 정확한 음료 이름을 입력했을때의 처리 과정(메뉴얼 참조)
    # 1. 자원이 충분한지 확인 ( T / F )
    # 2. T라면 돈을 입력 받을수 있도록 -> 동전 입력 받아서 합 연산한 후에 음료의 가격 이상인지 확인하여 T / F 반환
    # 3. T라면 음료를 반환해야하는데, resources에 있는 수량을 감소 시키고, profit 에는 음료 가격만큼 증가시킬 필요 있음. 그리고 동전 받은 것에서 음료 가격만큼 빼고 반환도 해줘야함.


    # if choice == '에스프레소':
    #     for key in resources:
    #         resources[key] = MENU['에스프레소']['재료'][key]
    #         if resources[key] < 0 :
    #             print(f'{key}가 부족합니다.')
    # elif choice == '라떼': > 이게 귀찮다면 함수화 시켜버리자.
        if is_resources_enough(MENU[choice]['재료']):
            # 이상의 조건식이 True 라면 동전 처리 해야합니다.
            money_received = process_coins()
            # 여기의 money_receiveed는 전역 변수 입니다. 그리고 proces_coins()의 결과값을 변수에 담았네요.
        if is_transaction_successful(money_received=money_received, drink_cost=MENU[choice]['가격']):
            # 이제 여기에 음료 제조과정을 작성하면 되겠네요.
            # 재료를 이제 실질적으로 차감하고, 음료를 만들어서 사용자에게 제공해야 합니다.
            # 재료 차감 파트를 is_resources_enough()함수를 참좋라여 여기서 작성하세요.
            # 해당 작성 결과를 함수화하도록 할 예정입니다.
            # 여기에 로직 작성하시오.
            resources['물'] = MENU[choice]['물']
            resources['우유'] = MENU[choice]['우유']
            resources['커피'] = MENU[choice]['커피']
            resources['우유'] = MENU[choice]['우유']
            print(f'{choice}이 나왔습니다. 맛있게 드세요.')
            make_coffee(drink_name=choice, order_ingredient=MENU[choice]['제로'])




    # todo -5: choice가 이상의 조건을 충족하지 않을때 '잘못 입력하셨습니다. 다시 입력하세요' 를 출력하는 부분
    # else:
    # print('잘못 입력하셨습니다. 다시 입력하세요')

        sum += float(input('쿼터 동전을 몇개나 넣으시겠습니까?>>>')) *0.25
        sum += float(input('다음 동전을 몇개나 넣으시겠습니까?>>>')) * 0.1
        sum += float(input('니켈 동전을 몇개나 넣으시겠습니까?>>>')) * 0.05
        sum += float(input('페니 동전을 몇개나 넣으시겠습니까?>>>')) * 0.01
        return sum


# todo - 6: 우리가 왜 동전 처리 함수를 정의했는지 이해해야 합니다. 해당 총합을 가지고, 총합이 '선택한' 음료 가격보다 높다면 다음 과정으로 넘어갈 필요가 있습니다.
def is_transaction_succesful(money_received, drink_cost):
    """process_coins()의 결과값과 음료 가격을 매개변수로 받아 받은 동전의 총합이 음료 가격보다 높으면 True / 아니면 False 반환. 그리고 True 인 경우에는 profit에 음료 가격만큼 추가해줘야 하고, False인 경우에는 받은 동전들을 반환해주는 안내문 출력."""
    change = money_received -drink_cost
    if change > 0:
        # 이러면 음료 제조 과정으로 넘어가야겠네요. 그리고 profit에 추가도 해줘야 하고,
        global profit       # 전역 변수인 profit을 함수 내부에서 사용하기 위한 키워드, 근데 함수 호출을 통한 전역 변수의 값 변화는 권장하지 않습니다.
        profit += drink_cost
        print(f'잔돈 ${change}를 반환해야 합니다.')
        return True     # 그래야 음료 제조 과정의 조건식으로 쓸수 있으니까요
    else:
        print(f'금액이 충분하지 않습니다. ${money_received}를 반환합니다.')
        return False # 얘는 음료 제조 과정의 조건식으로 쓰이더라도 실행이 안되겠네요.

'''
현재 자판기 내에 있는 물 / 우유 / 커피 / 금액 에서 라떼 한잔을 뽑고나서의 물 / 우유 / 커피 / 금액의 변동을 콘솔에 출력하시오.

실행 예
물: xml
우유: xml
커피:xg
수익$x
'''
profit += MENU['라떼']['가격']
print(f'수익: ${profit}')
# 하드코딩으로 하신분들은 또 반복문 돌려서 한번 작성해보세요.
resources['물'] -= MENU['라떼']['재료']['물']
print(f'물: {resources['물']}')
# resources : 프로그램이 사용하는 외부 자원 (예: 파일, 데이터, 시스템 자원)을 의미하기도 하고, 특정 패키지 내의 파일(자원)에 접근하는 모듈의 기능을 의미하기도 합니다.
# 반복문
for key in resources:   # 저는 dict 반복문 돌릴때 안헷갈리게 변수명을 그냥 key로 쓰는편입니다. list / tuple일 때는 i를 쓰겠죠.
    resources[key] -= MENU['라떼']['재료'][key]
    if key == '커피':
        print(f'{key}: {resources[key]}g')
    else:
        print(f'{key}: {resources[key]}ml')

'''
20250908에서는 dictionary 내부의 value 들을 조회하는 정도에 그쳤지만 금일 수업에서는 필요한 value들을 다양한 방법을(key를 일일이 지정해서 넘아가거나 / 반복문을 작성하거나)통해 추출한 후에 이를 연산하는 것까지 처리하고 있습니다. 이상의 코드는 그 예시이고, 앞으로의 데이터를 다루는 부분에 있어서 매우 중요합니다. SQL에서도 각각 칼럼에 있는 값들을 필요한 것들을 추출해서 연산한 후에 집계함수를 사용하는 등의 응용이 잇을수 있으니
파이썬으로 작성하는 법 뿐만 아니란 원리 자체를 학습하시면 더 좋습니다. 
'''

print(f'물: {resources['물']}ml')
print(f'우유: {resources['우유']}ml')
print(f'커피: {resources['커피']}g')


# 실행 예
# 카푸치노 에는 우유가 10ml가 들어갑니다.
# 라고 콘솔에 출력할수 있도록 카푸치노의 우유량을 추출하는 코드를 작성하시오.

# 에스프레소의 가격을 추출하시오.
# print(MENU['에스프레소']['가격'])
#
# # 라떼의 재료를 재료 이름만 출력하시오.
# # 실행 예
# # 물 우유 커피
# for key in MENU['라떼']['재료']:    # dictionary 에서 반복문을 돌리게 되면 key가 나온다. 그리고 그 key를 이용해서 value 조회 가능
#     print(key, end=' ')
#
# print()
#
# print(' '.join((MENU['라떼']['재료'].keys())) )
#
# '''
# 38번 라인의 코드 작성 방식의 경우 key를 추출하여 dictionary의 value값에 접근할 수 있습니다. 그렇다면 연산이 가능하다는 의미도 됩니다.
# 43번 라인의 코드 작성 방식의 경우 value를 추출하는 것이 불가능하지만 한 줄에 간단하게 쓸수있다는 장점이 있습니다 (method를 아는 사람들에게만요)
#
# 에스프레소 / 라떼 / 카푸치노를 50잔씩 만든다고 가정했을때 필요한 커피 / 우유 / 물의 양은 얼마인가?
# 2500 / 10000 / 12500
#
# '''
# print()
# coffee = 0
# water = 0
# milk = 0
# for key in MENU: # 결과괎 : 에스프레스 / 라떼 / 카푸치노
#     for key_key in MENU[key]['재료']:
#         print(MENU[key]['재료'][key_key])
#         if key_key == '커피':
#             coffee += MENU[key]['재료'][key_key]
#         elif key_key == '물':
#             water += MENU[key]['재료'][key_key]
#         else:
#             milk += MENU[key]['재료'][key_key]
#
# print(coffee*50)
# print(water*50)
# print(milk*50)
'''
이상의 학습 과정에서 중요한 부분은 중첩적으로 이루어진 dictionary - JSON - 기타 collections들이 합쳐진 데이터에서 내가 필요한 부분을 어떻게 추출할수 있을까 입니다.

일반적으로는 list의 경우 index를 이용하기 때문에 반복문 쓰고 치우면 그만인데 반해 dictionary는 반복문을 돌리면 key가 나오게 되고, 그 key를 또 이용해야지만 value가 추출됩니다. 

그리고 그 value를 이용해서 연산을 하거나 로직을 작성해야 하죠.

근데 value가 또 dictionary거나 list거나 혹은 객체거나 한 경우에는 좀 복잡해보입니다. 이를 연습하기 위한 수업이었고, coffee.machine을 작성하면서 중첩 dictionary를 활용하도록 하겠습니다. 
'''


# # 1. 카푸치노의 우유량 추출 및 출력
# milk_amount = MENU['카푸치노']['재료']['우유']
# print(f"카푸치노 에는 우유가 {milk_amount}ml가 들어갑니다.")
#
# # 2. 에스프레소의 가격 추출
# espresso_price = MENU['에스프레소']['가격']
# print(f"에스프레소의 가격은 {espresso_price} 원 입니다.")
#
# # 3. 라떼의 재료 이름만 출력
# latte_ingredients = MENU['라떼']['재료'].keys()
# print("라떼의 재료는 다음과 같습니다:")
# for ingredient in latte_ingredients:
#     print(ingredient)   # -> 챗 지피티 풀이법.




